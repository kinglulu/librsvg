AC_INIT(rsvg.h)

LIBXML_REQUIRED=1.8.10
LIBART_REQUIRED=2.2.0
GLIB_REQUIRED=1.2.9
GTK_REQUIRED=1.2.9
FREETYPE_REQUIRED=2.0.1
FREETYPE_LIBRARY_REQUIRED=6.1.0
GDK_PIXBUF_REQUIRED=0.10.0
POPT_REQUIRED=1.5

dnl ====================================

AM_CONFIG_HEADER(config.h)

LIBRSVG_MAJOR_VERSION=1
LIBRSVG_MINOR_VERSION=0
LIBRSVG_MICRO_VERSION=2
LIBRSVG_VERSION=$LIBRSVG_MAJOR_VERSION.$LIBRSVG_MINOR_VERSION.$LIBRSVG_MICRO_VERSION
LIBRSVG_VERSION_INFO=`expr $LIBRSVG_MAJOR_VERSION + $LIBRSVG_MINOR_VERSION`:$LIBRSVG_MICRO_VERSION:$LIBRSVG_MINOR_VERSION

AC_SUBST(LIBRSVG_MAJOR_VERSION)
AC_SUBST(LIBRSVG_MINOR_VERSION)
AC_SUBST(LIBRSVG_MICRO_VERSION)
AC_SUBST(LIBRSVG_VERSION)
AC_SUBST(LIBRSVG_VERSION_INFO)

VERSION=$LIBRSVG_VERSION

AM_INIT_AUTOMAKE(librsvg, $VERSION)

AM_MAINTAINER_MODE

AC_PROG_CC
AC_PROG_CPP
AC_STDC_HEADERS
AC_ARG_PROGRAM
AM_PROG_LIBTOOL

AC_SUBST(LIBXML_REQUIRED)
AC_SUBST(LIBART_REQUIRED)
AC_SUBST(GLIB_REQUIRED)
AC_SUBST(GTK_REQUIRED)
AC_SUBST(FREETYPE_REQUIRED)
AC_SUBST(POPT_REQUIRED)

dnl ====================================
dnl = Begin tests for popt
dnl ====================================
AC_CHECK_LIB(popt, poptParseArgvString, [POPT_LIBS="-lpopt"])
AC_SUBST(POPT_LIBS)
dnl ====================================
dnl = End tests for popt
dnl ====================================

dnl ====================================
dnl = Begin tests for libpng
dnl ====================================
  if test -z "$LIBPNG"; then
    AC_CHECK_LIB(png, png_read_info,
      AC_CHECK_HEADER(png.h,
        png_ok=yes,
        png_ok=no),
      AC_MSG_ERROR(*** (PNG library not found) ***), -lz -lm)
    if test "$png_ok" = yes; then
      AC_MSG_CHECKING([for png_structp in png.h])
      AC_TRY_COMPILE([#include <png.h>],
        [png_structp pp; png_infop info; png_colorp cmap; png_create_read_struct;],
        png_ok=yes,
        png_ok=no)
      AC_MSG_RESULT($png_ok)
      if test "$png_ok" = yes; then
        PNG='png'; LIBPNG='-lpng -lz'
      else
        AC_MSG_WARN(*** PNG loader will not be built (PNG library is too old) ***)
      fi
    else
     AC_MSG_WARN(*** PNG loader will not be built (PNG header file not found) ***)
    fi
  fi

AC_SUBST(LIBPNG)
dnl =======================
dnl = End tests for libpng
dnl =======================

dnl ====================================
dnl = Begin tests for glib
dnl ====================================
AC_PATH_PROG(GLIB_CONFIG,glib-config,no)
if test x$GLIB_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find glib-config please install the glib package)
fi

GLIB_VERSION="`$GLIB_CONFIG --version`"
case "$GLIB_VERSION" in
	1.2.*)
		:
  	;;

	*)
		AC_ERROR(librsvg needs glib version 1.2.x not $GLIB_VERSION)
	;;
esac

GLIB_LIBS=`$GLIB_CONFIG --libs`
GLIB_CFLAGS=`$GLIB_CONFIG --cflags`
AC_SUBST(GLIB_LIBS)
AC_SUBST(GLIB_CFLAGS)
dnl ====================================
dnl = End tests for glib
dnl ====================================

dnl ====================================
dnl = Begin tests for gtk
dnl ====================================
AC_PATH_PROG(GTK_CONFIG,gtk-config,no)
if test x$GTK_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find gtk-config please install the gtk package)
fi

GTK_VERSION="`$GTK_CONFIG --version`"
case "$GTK_VERSION" in
	1.2.*)
		:
  	;;

	*)
		AC_ERROR(librsvg needs gtk version 1.2.x not $GTK_VERSION)
	;;
esac

GTK_LIBS=`$GTK_CONFIG --libs`
GTK_CFLAGS=`$GTK_CONFIG --cflags`
AC_SUBST(GTK_LIBS)
AC_SUBST(GTK_CFLAGS)
dnl ====================================
dnl = End tests for gtk
dnl ====================================

dnl ====================================
dnl = begin gdk-pixbuf checks
dnl ====================================
AM_PATH_GDK_PIXBUF($GDK_PIXBUF_REQUIRED,,
AC_MSG_ERROR([*** gdk_pixbuf $GDK_PIXBUF_REQUIRED or better is required.]))

AC_SUBST(GDK_PIXBUF_REQUIRED)
dnl ====================================
dnl = end gdk-pixbuf checks
dnl ====================================

dnl =======================
dnl = begin tests for FreeType2
dnl =======================
NAUTILUS_PATH_FREETYPE2($FREETYPE_LIBRARY_REQUIRED,,
AC_MSG_ERROR([
*** FreeType2 $FREETYPE_REQUIRED or better is required. You can obtain a
*** packaged version of FreeType2 over here:
*** http://developer.eazel.com/eazel-hacking/updates/freetype2
*** source versions are available from ftp://ftp.freetype.org]))

AC_SUBST(FREETYPE2_CFLAGS)
AC_SUBST(FREETYPE2_LIBS)
dnl =======================
dnl = End tests for FreeType2
dnl =======================

dnl ====================================
dnl = Begin tests for libxml
dnl ====================================
AC_PATH_PROG(XML_CONFIG,xml-config,no)
if test x$XML_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find xml-config please install the gnome-xml package)
fi

XML_VERSION="`$XML_CONFIG --version`"
case "$XML_VERSION" in
	1.*)
		:
  	;;

	*)
		AC_ERROR(librsvg needs gnome-xml version 1.x not $XML_VERSION)
	;;
esac

XML_LIBS=`$XML_CONFIG --libs`
XML_CFLAGS=`$XML_CONFIG --cflags`
AC_SUBST(XML_LIBS)
AC_SUBST(XML_CFLAGS)
dnl ====================================
dnl = End tests for libxml
dnl ====================================


dnl ====================================
dnl = Begin tests for libart
dnl ====================================
AC_PATH_PROG(ART_CONFIG,libart-config,no)
if test x$ART_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find libart-config please install the gnome-libs package)
fi

ART_VERSION="`$ART_CONFIG --version`"
case "$ART_VERSION" in
	2.2.*)
		:
  	;;

	*)
		AC_ERROR(librsvg needs libart version 2.2.x not $ART_VERSION)
	;;
esac

ART_LIBS=`$ART_CONFIG --libs`
ART_CFLAGS=`$ART_CONFIG --cflags`
AC_SUBST(ART_LIBS)
AC_SUBST(ART_CFLAGS)
dnl ====================================
dnl = End tests for libxml
dnl ====================================


LIBRSVG_LIBDIR='-L${libdir}'
LIBRSVG_INCLUDEDIR='-I${includedir}/librsvg-1 ${FREETYPE2_CFLAGS}'
LIBRSVG_LIBS='-lrsvg -lart_lgpl ${FREETYPE2_LIBS}'

AC_SUBST(LIBRSVG_LIBDIR)
AC_SUBST(LIBRSVG_INCLUDEDIR)
AC_SUBST(LIBRSVG_LIBS)

AC_C_BIGENDIAN

AC_OUTPUT([
librsvg.spec
librsvg-features.h
Makefile
librsvg-config
librsvg-1.0.pc], [case "$CONFIG_FILES" in *librsvg-config*) chmod +x librsvg-config;; esac])
