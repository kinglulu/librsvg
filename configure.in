AC_INIT(rsvg.h)

dnl ===========================================================================

GDK_PIXBUF_REQUIRED=1.3.7
GLIB_REQUIRED=2.0.0
LIBART_REQUIRED=2.3.10
LIBXML_REQUIRED=2.4.7
PANGOFT2_REQUIRED=1.2.0
POPT_REQUIRED=1.5

AC_SUBST(GDK_PIXBUF_REQUIRED)
AC_SUBST(GLIB_REQUIRED)
AC_SUBST(LIBART_REQUIRED)
AC_SUBST(LIBXML_REQUIRED)
AC_SUBST(PANGOFT2_REQUIRED)
AC_SUBST(POPT_REQUIRED)

dnl ===========================================================================

LIBRSVG_MAJOR_VERSION=2
LIBRSVG_MINOR_VERSION=8
LIBRSVG_MICRO_VERSION=1
AC_SUBST(LIBRSVG_MAJOR_VERSION)
AC_SUBST(LIBRSVG_MINOR_VERSION)
AC_SUBST(LIBRSVG_MICRO_VERSION)

LIBRSVG_VERSION=$LIBRSVG_MAJOR_VERSION.$LIBRSVG_MINOR_VERSION.$LIBRSVG_MICRO_VERSION

VERSION_INFO=`expr $LIBRSVG_MAJOR_VERSION + $LIBRSVG_MINOR_VERSION`:$LIBRSVG_MICRO_VERSION:$LIBRSVG_MINOR_VERSION
AC_SUBST(VERSION_INFO)

dnl ===========================================================================

AM_INIT_AUTOMAKE(librsvg, $LIBRSVG_VERSION)
AM_CONFIG_HEADER(config.h)

AM_MAINTAINER_MODE

AC_ISC_POSIX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_AWK
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_STDC_HEADERS

AC_C_BIGENDIAN

GNOME_REQUIRE_PKGCONFIG

dnl ===========================================================================

#AC_CANONICAL_HOST

AC_MSG_CHECKING([for some Win32 platform])
case "$host" in
  *-*-mingw*|*-*-cygwin*)
    platform_win32=yes
    ;;
  *)
    platform_win32=no
    ;;
esac
AC_MSG_RESULT([$platform_win32])
AM_CONDITIONAL(PLATFORM_WIN32, test "$platform_win32" = "yes")

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    native_win32=yes
    ;;
  *)
    native_win32=no
    ;;
esac
AC_MSG_RESULT([$native_win32])
AM_CONDITIONAL(OS_WIN32, test "$native_win32" = "yes")

dnl ===========================================================================

PKG_CHECK_MODULES(LIBRSVG, \
	gdk-pixbuf-2.0 >= $GDK_PIXBUF_REQUIRED \
	glib-2.0 >= $GLIB_REQUIRED \
	libart-2.0 >= $LIBART_REQUIRED \
	libxml-2.0 >= $LIBXML_REQUIRED \
	pangoft2 >= $PANGOFT2_REQUIRED)
AC_SUBST(LIBRSVG_LIBS)
AC_SUBST(LIBRSVG_CFLAGS)

dnl ===========================================================================

AC_CHECK_LIB(popt, poptParseArgvString, [POPT_LIBS="-lpopt"],
AC_MSG_ERROR([popt 1.5 or newer is required to build librsvg.
You can download the latest version from ftp://ftp.rpm.org/pub/rpm/dist/rpm-4.0.x/]))
AC_SUBST(POPT_LIBS)

dnl ===========================================================================

LIBGSF_CFLAGS=""
LIBGSF_LIBS=""

LIBGSFPKG=""
test_gsf=true
AC_ARG_WITH(svgz,[  --with-svgz  Use libgsf for run-time decompression],[
	if test "x$withval" = "xno"; then
		test_gsf=false
	fi
])
if test "x$test_gsf" = "xtrue"; then
	PKG_CHECK_MODULES(LIBGSF,[libgsf-1 >= 1.6.0], test_gsf=true, test_gsf=false)
fi

if test "x$test_gsf" = "xtrue"; then
	LIBGSF_CFLAGS="$LIBGSF_CFLAGS -DHAVE_SVGZ=1"
	LIBGSFPKG="libgsf-1"
else
	AC_MSG_WARN([SVGZ support disabled, as requested (Use --with-svgz to enable)])
	gsf_warning="
	You are building without libgsf support. LibRSVG will not be able to handle GZipped SVGs, as is required per the SVG specification. If you are a library vendor or distributor, you are doing the world a disservice and should strongly consider shipping libgsf."
fi
AM_CONDITIONAL(WITH_LIBGSF,[test "$LIBGSFPKG" != ""])

AC_SUBST(LIBGSFPKG)

AC_SUBST(LIBGSF_CFLAGS)
AC_SUBST(LIBGSF_LIBS)

dnl ===========================================================================

LIBGNOME_VFS_CFLAGS=""
LIBGNOME_VFS_LIBS=""

LIBGNOME_VFS_PKG=""
test_gnome_vfs=true
AC_ARG_ENABLE(gnome-vfs, [  --enable-gnome-vfs  Use Gnome VFS for reading remote files [default = auto]],
			 test_gnome_vfs="$enableval")

if test "x$test_gnome_vfs" != "xno"; then
	PKG_CHECK_MODULES(LIBGNOME_VFS,[gnome-vfs-2.0 >= 1.9.16], test_gnome_vfs=true, test_gnome_vfs=false)
fi

if test "x$test_gnome_vfs" = "xtrue"; then
	LIBGNOME_VFS_CFLAGS="$LIBGNOME_VFS_CFLAGS -DHAVE_GNOME_VFS=1"
	LIBGNOME_VFS_PKG="gnome-vfs-2.0"
else
	AC_MSG_WARN([Gnome VFS support disabled, as requested (Use --with-gnome-vfs to enable)])
fi
AM_CONDITIONAL(WITH_LIBGNOME_VFS,[test "$LIBGNOME_VFS_PKG" != ""])

AC_SUBST(LIBGNOME_VFSPKG)

AC_SUBST(LIBGNOME_VFS_CFLAGS)
AC_SUBST(LIBGNOME_VFS_LIBS)

dnl ===========================================================================

LIBCROCO_CFLAGS=""
LIBCROCO_LIBS=""
LIBCROCOPKG=""

test_croco=true
AC_ARG_WITH(croco,[  --with-croco  Use libcroco for CSS parsing],[
	if test "x$withval" = "xno"; then
		test_croco=false
	fi
])
if test "x$test_croco" = "xtrue"; then
	PKG_CHECK_MODULES(LIBCROCO,[libcroco-0.6 >= 0.6.0], test_croco=true, test_croco=false)
fi

if test "x$test_croco" = "xtrue"; then
	LIBCROCO_CFLAGS="$LIBCROCO_CFLAGS -DHAVE_LIBCROCO=1"
	LIBCROCOPKG="libcroco-0.6"
else
	AC_MSG_WARN([LibCroco support disabled, as requested (Use --with-croco to enable)])
        croco_warning="
You are building without libcroco support. LibRSVG will not be able to handle embedded CSS, as is required per the SVG specification. If you are a library vendor or distributor, you are doing the world a disservice and should strongly consider shipping libcroco. Even KSVG needs libcroco now..."
fi

AC_SUBST(LIBCROCOPKG)
AC_SUBST(LIBCROCO_CFLAGS)
AC_SUBST(LIBCROCO_LIBS)

dnl ===========================================================================

AC_CHECK_FUNCS(strtok_r)

dnl ===========================================================================

dnl Turn on the additional warnings last, so -Werror doesn't affect other tests.

AC_ARG_ENABLE(more-warnings,
[  --enable-more-warnings  Maximum compiler warnings],
set_more_warnings="$enableval",[
if test -f $srcdir/CVSVERSION; then
        is_cvs_version=true
        set_more_warnings=yes
else
        set_more_warnings=no
fi
])
AC_MSG_CHECKING(for more warnings, including -Werror)
if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
        AC_MSG_RESULT(yes)
        CFLAGS="\
        -Wall \
        -Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes \
        -Wnested-externs -Wpointer-arith \
        -Wcast-align -Wsign-compare \
	-Werror \
        $CFLAGS"

        for option in -Wsign-promo; do
                SAVE_CFLAGS="$CFLAGS"
                CFLAGS="$option $CFLAGS"
                AC_MSG_CHECKING([whether gcc understands $option])
                AC_TRY_COMPILE([], [],
                        has_option=yes,
                        has_option=no,)
                if test $has_option = no; then
			CFLAGS="$SAVE_CFLAGS"
                fi
                AC_MSG_RESULT($has_option)
                unset has_option
                unset SAVE_CFLAGS
        done
        unset option
else
        AC_MSG_RESULT(no)
fi

have_gtk=no
PKG_CHECK_MODULES(GTK, gtk+-2.0 >= 1.3.12, have_gtk=yes,
		       have_gtk=no)

GTK_VERSION=
if test "x$have_gtk" = "xyes"; then
   GTK_VERSION=`$PKG_CONFIG --variable=gtk_binary_version gtk+-2.0`
fi
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(GTK_VERSION)
AM_CONDITIONAL(HAVE_GTK, test "x$have_gtk" = "xyes")

have_gnome_print=no
PKG_CHECK_MODULES(GNOME_PRINT, \
		libgnomeprint-2.2 >= 2.2.0	\
		libgnomeprintui-2.2 >= 2.2.0,	\ 
		have_gnome_print=yes,		\
		have_gnome_print=no)

if test "x$have_gnome_print" = "xyes"; then
   GNOME_PRINT_CFLAGS="$GNOME_PRINT_CFLAGS -DHAVE_GNOME_PRINT=1"
fi

AC_SUBST(GNOME_PRINT_CFLAGS)
AC_SUBST(GNOME_PRINT_LIBS)

have_gdk_x11=no
PKG_CHECK_MODULES(GDK_X11, gdk-x11-2.0 >= 2.0.0, have_gdk_x11=yes, have_gdk_x11=no)

if test "x$have_gdk_x11" = "xyes"; then
	AC_PATH_XTRA

	if test "x$have_x" != "xyes"; then
		GDK_X11_LIBS=""
		GDK_X11_CFLAGS=""
	else
		GDK_X11_LIBS="$GDK_X11_LIBS $X_LIBS -lX11"
		GDK_X11_CFLAGS="$GDK_X11_CFLAGS $X_CFLAGS"
		AC_DEFINE(ENABLE_XEMBED, 1, [Is XEmbed available])
	fi
fi

AC_SUBST(GDK_X11_CFLAGS)
AC_SUBST(GDK_X11_LIBS)

AC_ARG_ENABLE(gtk-theme,
    [  --enable-gtk-theme  Enable a RSVG based GTK+ theme engine [default=auto]],,
    enable_gtk_theme=yes)

if test "x$enable_gtk_theme" = "xyes"; then
   if test "x$have_gtk" = "xno"; then
      enable_gtk_theme=no;
   fi
fi

AM_CONDITIONAL(ENABLE_GTK_ENGINE, test "x$enable_gtk_theme" = "xyes")

AC_PATH_PROG(QUERYLOADERS, gdk-pixbuf-query-loaders, true)

AC_ARG_ENABLE(pixbuf-loader,
    [  --enable-pixbuf-loader  Enable a RSVG based GdkPixbuf loader [default=auto]],
    enable_pixbuf_loader="$enableval", enable_pixbuf_loader=auto)

if test "x$enable_pixbuf_loader" = xauto ; then
    if test x$QUERYLOADERS != x ; then 
        enable_pixbuf_loader=yes
    else
        enable_pixbuf_loader=no
    fi
fi

AM_CONDITIONAL(ENABLE_PIXBUF_LOADER, test x$enable_pixbuf_loader = xyes)

##################################################
##################################################

MOZILLA_CFLAGS=
if test -z "$MOZILLA_CONFIG"; then
  AC_PATH_PROG(MOZILLA_CONFIG, mozilla-config, no)
fi
if test "x$MOZILLA_CONFIG" != "xno"; then
  _mozilla_include_dir=`mozilla-config --cflags|sed 's/-I\(.*\) .*/\1/'`
  MOZILLA_CFLAGS="-I$_mozilla_include_dir/plugin -I$_mozilla_include_dir/java -I$_mozilla_include_dir/nspr"
else
  PKG_CHECK_MODULES(MOZILLA, mozilla-plugin, build_mozilla_plugin=yes, 
					[AC_MSG_WARN([mozilla-config not found. Mozilla/Netscape plugin will not be built])])
fi
build_mozilla_plugin=no
if test "x$MOZILLA_CFLAGS" != "x"; then
   build_mozilla_plugin=yes
fi
AM_CONDITIONAL(WITH_MOZILLA,[test "x$build_mozilla_plugin" = "xyes"])
AC_SUBST(MOZILLA_CFLAGS)

##################################################
# Checks for gtk-doc and docbook-tools
##################################################

AC_ARG_WITH(html-dir, [  --with-html-dir=PATH    path to installed docs ])

if test "x$with_html_dir" = "x" ; then
  HTML_DIR='${datadir}/doc/librsvg/html'
else
  HTML_DIR=$with_html_dir
fi

AC_SUBST(HTML_DIR)

AC_CHECK_PROG(GTKDOC, gtkdoc-mkdb, true, false)

gtk_doc_min_version=0.9
if $GTKDOC ; then 
    gtk_doc_version=`gtkdoc-mkdb --version`
    AC_MSG_CHECKING([gtk-doc version ($gtk_doc_version) >= $gtk_doc_min_version])

    IFS="${IFS= 	}"; gtk_save_IFS="$IFS"; IFS="."
    set $gtk_doc_version
    for min in $gtk_doc_min_version ; do
        cur=$1; shift
        if test -z $min ; then break; fi
        if test -z $cur ; then GTKDOC=false; break; fi
        if test $cur -gt $min ; then break ; fi
        if test $cur -lt $min ; then GTKDOC=false; break ; fi
    done
    IFS="$gtk_save_IFS"

    if $GTKDOC ; then
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
   fi
fi

AC_CHECK_PROG(DB2HTML, db2html, true, false)
AM_CONDITIONAL(HAVE_DOCBOOK, $DB2HTML)

dnl Make people enable the gtk-doc stuff explicitely.
AC_ARG_ENABLE(gtk-doc, [  --enable-gtk-doc        use gtk-doc to build documentation [default=yes]], enable_gtk_doc="$enableval", enable_gtk_doc=yes)

if test x$enable_gtk_doc = xyes ; then
  if test x$GTKDOC != xtrue ; then
    enable_gtk_doc=no 
  fi
fi

dnl NOTE: We need to use a separate automake conditional for this
dnl       to make this work with the tarballs.
AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes)

dnl ===========================================================================

m4_copy([AC_DEFUN],[glib_DEFUN])
glib_DEFUN([GLIB_LC_MESSAGES],
  [AC_CHECK_HEADERS([locale.h])
    if test $ac_cv_header_locale_h = yes; then
    AC_CACHE_CHECK([for LC_MESSAGES], am_cv_val_LC_MESSAGES,
      [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],
       am_cv_val_LC_MESSAGES=yes, am_cv_val_LC_MESSAGES=no)])
    if test $am_cv_val_LC_MESSAGES = yes; then
      AC_DEFINE(HAVE_LC_MESSAGES, 1,
        [Define if your <locale.h> file defines LC_MESSAGES.])
    fi
  fi])

GLIB_LC_MESSAGES

dnl ===========================================================================

AC_OUTPUT([
librsvg.spec
librsvg-features.h
Makefile
librsvg-2.0.pc
librsvg-2.0-uninstalled.pc
librsvg-zip
data/Makefile
doc/Makefile
gtk-engine/Makefile
gtk-engine/examples/Makefile
gtk-engine/examples/bubble/Makefile
gtk-engine/examples/bubble/gtk-2.0/Makefile
gdk-pixbuf-loader/Makefile
moz-plugin/Makefile
])

dnl =============================================================================================
echo "
librsvg-$LIBRSVG_VERSION

	prefix:                         ${prefix}
	compiler:                       ${CC}
	
	Build GdkPixbuf loader:         ${enable_pixbuf_loader}
	Build theme engine:             ${enable_gtk_theme}
	Build Netscape plugin:          ${build_mozilla_plugin}
	Handle svgz files:              ${test_gsf}
	Use Gnome VFS:                  ${test_gnome_vfs}
	Use libcroco for css parsing:   ${test_croco}
	Build documentation:            ${enable_gtk_doc}
"

AC_MSG_RESULT([$croco_warning]);
AC_MSG_RESULT([$gsf_warning]);
